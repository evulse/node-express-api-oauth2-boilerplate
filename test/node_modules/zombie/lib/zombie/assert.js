// Generated by CoffeeScript 1.4.0
var Assert, assert, assertMatch, isRegExp;

assert = require("assert");

isRegExp = require("util").isRegExp;

assertMatch = function(actual, expected, message) {
  if (isRegExp(expected)) {
    return assert(expected.test(actual), message || ("Expected '" + actual + "' to match " + expected));
  } else if (typeof expected === "function") {
    return assert(expected(actual), message);
  } else {
    return assert.equal(actual, expected, message);
  }
};

Assert = (function() {

  function Assert(browser) {
    this.browser = browser;
  }

  Assert.prototype.cookie = function(name, expected, message) {
    var actual;
    actual = this.browser.cookies().get(name);
    message || (message = "Expected cooking " + name + " to have the value '" + expected + "', found '" + actual + "'");
    return assertMatch(actual, expected, message);
  };

  Assert.prototype.pathname = function(expected, message) {
    return assertMatch(this.browser.location.pathname, expected, message);
  };

  Assert.prototype.redirected = function(message) {
    return assert(this.browser.redirected, message);
  };

  Assert.prototype.status = function(code, message) {
    return assert.equal(this.browser.statusCode, code, message);
  };

  Assert.prototype.success = function(message) {
    return assert.equal(this.browser.statusCode, 200, message);
  };

  Assert.prototype.url = function(url, message) {
    return assert.equal(this.browser.location, url, message);
  };

  Assert.prototype.attribute = function(selector, name, expected, message) {
    var actual, element, elements, _i, _len, _results;
    elements = this.browser.queryAll(selector);
    assert(elements.length > 0, "Expected selector '" + selector + "' to return one or more elements");
    _results = [];
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      element = elements[_i];
      actual = element.getAttribute(name);
      _results.push(assertMatch(actual, expected, message));
    }
    return _results;
  };

  Assert.prototype.css = function(selector, style, expected, message) {
    var actual, element, elements, _i, _len, _results;
    elements = this.browser.queryAll(selector);
    assert(elements.length > 0, "Expected selector '" + selector + "' to return one or more elements");
    _results = [];
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      element = elements[_i];
      actual = element.style[style];
      _results.push(assertMatch(actual, expected, message));
    }
    return _results;
  };

  Assert.prototype.element = function(selector, message) {
    var element;
    element = this.browser.query(selector);
    return assert(selector, message || ("Could not find element '" + selector + "'"));
  };

  Assert.prototype.elements = function(selector, count, message) {
    var elements;
    elements = this.browser.queryAll(selector);
    if (count.exactly) {
      count = count.exactly;
    }
    if (typeof count === "number") {
      message || (message = "Expected " + count.exactly + " elements matching '" + selector + "', found " + elements.length);
      return assert.equal(elements.length, count, message);
    } else {
      if (count.atLeast) {
        elements = this.browser.queryAll(selector);
        message || (message = "Expected at least " + count.atLeast + " elements matching '" + selector + "', found only " + elements.length);
        assert(elements.length >= count.atLeast, message);
      }
      if (count.atMost) {
        message || (message = "Expected at most " + count.atMost + " elements matching '" + selector + "', found " + elements.length);
        return assert(elements.length <= count.atMost, message);
      }
    }
  };

  Assert.prototype.input = function(selector, expected, message) {
    var actual, element, elements, _i, _len, _results;
    elements = this.browser.queryAll(selector);
    _results = [];
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      element = elements[_i];
      actual = element.value;
      _results.push(assertMatch(actual, expected, message));
    }
    return _results;
  };

  Assert.prototype.text = function(selector, expected, message) {
    var actual;
    actual = this.browser.text(selector);
    return assertMatch(actual, expected, message);
  };

  Assert.prototype.inFocus = function(selector, message) {
    var element;
    if (selector) {
      element = this.browser.query(selector);
      return assert.equal(this.browser.activeElement, element, "Expected element '" + selector + "' to have the focus'");
    } else {
      return assert.equal(this.browser.activeElement, this.browser.body, "Expected no element to have focus");
    }
  };

  Assert.prototype.evaluate = function(expression, expected, message) {
    var actual;
    actual = this.browser.evaluate(expression);
    if (arguments.length === 1) {
      return assert(actual);
    } else {
      return assertMatch(actual, expected, message);
    }
  };

  Assert.prototype.global = function(name, expected, message) {
    var actual;
    actual = this.browser.window[name];
    message || (message = "Expected global " + name + " to have the value '" + expected + "', found '" + actual + "'");
    return assertMatch(actual, expected, message);
  };

  Assert.prototype.prompted = function(messageShown, message) {
    return assert(this.browser.prompted(messageShown), message);
  };

  return Assert;

})();

module.exports = Assert;
