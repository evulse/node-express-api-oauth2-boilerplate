{
  "name": "iconv",
  "main": "./build/Release/iconv",
  "version": "1.2.3",
  "description": "Text recoding in JavaScript for fun and profit!",
  "homepage": "https://github.com/bnoordhuis/node-iconv",
  "author": {
    "name": "Ben Noordhuis",
    "email": "info@bnoordhuis.nl",
    "url": "http://bnoordhuis.nl/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bnoordhuis/node-iconv.git"
  },
  "engines": {
    "node": ">=0.3.0"
  },
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "# node-iconv\n\nText recoding in JavaScript for fun and profit!\n\nnode-iconv may or may not work on Windows. Please try it and report any issues\nyou have.\n\n## Installing with [npm](http://npmjs.org/)\n\n    $ npm install iconv\n\nNote that you do not need to have a copy of libiconv installed to use this\nmodule.\n\n## Compiling from source\n\n    $ git clone git://github.com/bnoordhuis/node-iconv.git\n    $ node-gyp configure build\n    $ npm install .\n\n## Usage\n\nEncode from one character encoding to another:\n\n    // convert from UTF-8 to ISO-8859-1\n    var Buffer = require('buffer').Buffer;\n    var Iconv  = require('iconv').Iconv;\n    var assert = require('assert');\n\n    var iconv = new Iconv('UTF-8', 'ISO-8859-1');\n    var buffer = iconv.convert('Hello, world!');\n    var buffer2 = iconv.convert(new Buffer('Hello, world!'));\n    assert.equals(buffer.inspect(), buffer2.inspect());\n    // do something useful with the buffers\n\nLook at test.js for more examples and node-iconv's behaviour under error\nconditions.\n\n## Notes\n\nThings to keep in mind when you work with node-iconv.\n\n### Chunked data\n\nSay you are reading data in chunks from a HTTP stream. The logical input is a\nsingle document (the full POST request data) but the physical input will be\nspread over several buffers (the request chunks).\n\nYou must accumulate the small buffers into a single large buffer before\nperforming the conversion. If you don't, you will get unexpected results with\nmulti-byte and stateful character sets like UTF-8 and ISO-2022-JP.\n\n[node-buffertools](http://github.com/bnoordhuis/node-buffertools) lets you\nconcatenate buffers painlessly. See the description of `buffertools.concat()`\nfor details.\n\n### Dealing with untranslatable characters\n\nCharacters are not always translatable to another encoding. The UTF-8 string\n\"ça va が\", for example, cannot be represented in plain 7-bits ASCII without\nsome loss of fidelity.\n\nBy default, node-iconv throws EILSEQ when untranslatabe characters are\nencountered but this can be customized. Quoting the `iconv_open(3)` man page:\n\n    //TRANSLIT\n    When  the  string  \"//TRANSLIT\"  is appended to tocode, transliteration is\n    activated. This means that when a character cannot be represented in the\n    target character set, it can be approximated through one or several\n    similarly looking characters.\n\n    //IGNORE\n    When the string \"//IGNORE\" is appended to tocode, characters that cannot be\n    represented in the target character set will be silently discarded.\n\nExample usage:\n\n    var iconv = new Iconv('UTF-8', 'ASCII');\n    iconv.convert('ça va'); // throws EILSEQ\n\n    var iconv = new Iconv('UTF-8', 'ASCII//IGNORE');\n    iconv.convert('ça va'); // returns \"a va\"\n\n    var iconv = new Iconv('UTF-8', 'ASCII//TRANSLIT');\n    iconv.convert('ça va'); // \"ca va\"\n\n    var iconv = new Iconv('UTF-8', 'ASCII//TRANSLIT//IGNORE');\n    iconv.convert('ça va が'); // \"ca va \"\n\n### EINVAL\n\nEINVAL is raised when the input ends in a partial character sequence. This is a\nfeature, not a bug.\n",
  "readmeFilename": "README.md",
  "_id": "iconv@1.2.3",
  "dist": {
    "shasum": "60e4f173e1b9b2a263e7ab978213cdbf34a09591"
  },
  "_from": "iconv@1.2.3",
  "_resolved": "https://registry.npmjs.org/iconv/-/iconv-1.2.3.tgz"
}
