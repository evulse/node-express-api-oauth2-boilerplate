{
  "name": "easyxml",
  "preferGlobal": false,
  "version": "0.0.3",
  "author": {
    "name": "Thomas Hunter",
    "email": "tlhunter@gmail.com"
  },
  "description": "A configurable object to XML converter",
  "repository": {
    "type": "git",
    "url": "https://github.com/QuickenLoans/node-easyxml"
  },
  "contributors": [
    {
      "name": "Thomas Hunter",
      "email": "tlhunter@gmail.com"
    },
    {
      "name": "Joshua Kalis",
      "email": "JoshKalis@QuickenLoans.com"
    }
  ],
  "dependencies": {
    "elementtree": "0.1.5",
    "inflector": "0.0.1"
  },
  "devDependencies": {
    "chai": "1.4.2",
    "mocha": "1.8.1"
  },
  "license": "Dual BSD/GPL",
  "engines": {
    "node": ">= 0.8"
  },
  "keywords": [
    "xml"
  ],
  "readme": "## Easy XML\n\nThe purpose of this module is to provide an easy to use function for\nconverting your JS objects into XML. I plan on making it configurable\nsince a lot of different people have different expectations.\n\nEverything in here is CPU bound and without callbacks, so feel free to run\nit synchronously.\n\n## Installation\n\n    $ npm install easyxml\n\n## Config\n\n* singularizeChildren: If an array is plural, its children elements will be singular\n* underscoreAttributes: String attributes starting with _ will be XML attributes\n* rootElement: A string to wrap around your entire XML object\n* dateFormat: A date format for JS dates, currently accepts 'ISO 8601'\n* indent: A number representing the spaces to indent children, use 0 for no whitespace\n* manifest: Whether or not to add that XML manifest line to the top\n\n## Purpose\n\nI was working on a Node.js API, and I wanted to be able to build a single\nobject within each of my actions, and have that object automatically\nconverted into the appropriate response based on request type (JSON, XML).\nThe existing object to XML converters seemed to be lacking. The biggest\nfeature I wanted was that an array of elements with a plural name get a\nbunch of sub elements with the singular version of the name. This library\nallows for all of that. Can be configured globally as well as on a per\nusage basis.\n\n## Example\n\nInput Object:\n\n    {\n        items: [{\n            name: 'one',\n            _id: 1\n        }, {\n            name: 'two',\n            _id: 2\n        }, {\n            name: 'three',\n            _id: 3\n        }],\n        blah: 'http://www.google.com',\n        when: new Date(),\n        boolz: true,\n        nullz: null\n    }\n\nExample Config:\n\n    {\n        singularizeChildren: true,\n        underscoreAttributes: true,\n        rootElement: 'response',\n        dateFormat: 'ISO',\n        indent: 2,\n        manifest: true\n    }\n\nOutput XML:\n\n    <?xml version='1.0' encoding='utf-8'?>\n    <response>\n      <items>\n        <item id=\"1\">\n          <name>one</name>\n        </item>\n        <item id=\"2\">\n          <name>two</name>\n        </item>\n        <item id=\"3\">\n          <name>three</name>\n        </item>\n      </items>\n      <blah>http://www.google.com</blah>\n      <when>2012-09-25T18:47:39.485Z</when>\n      <boolz>true</boolz>\n      <nullz />\n    </response>\n\n## License\n\nThis project is licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "easyxml@0.0.3",
  "dist": {
    "shasum": "9bf70c0b6115405990c267fa61f254234eb986f2"
  },
  "_from": "easyxml@0.0.3",
  "_resolved": "https://registry.npmjs.org/easyxml/-/easyxml-0.0.3.tgz"
}
